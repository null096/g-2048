{"version":3,"sources":["styles/variables.scss","styles/main.scss","utils/Tools/index.js","utils/GameUtils/Tile.js","constants/index.js","utils/GameUtils/index.js","components/GameFieldBackground.jsx","constants/animation.js","components/TilePose.jsx","components/Tile.jsx","components/GameField.jsx","components/PopOver.jsx","components/ScorePose.jsx","components/GameInterface.jsx","components/App.jsx","stores/game/index.js","stores/index.js","serviceWorker.js","index.js"],"names":["module","exports","tileSize","spaceBetweenTiles","Tools","obj","_len","arguments","length","props","Array","_key","prop","i","Object","Tile","_ref","score","_ref$id","id","uuid","next","value","x","y","mergeTileId","_ref$isNew","isNew","classCallCheck","this","regenerator_default","a","mark","_callee","wrap","_context","prev","stop","FIELD_SIZE_X","FIELD_SIZE_Y","DIR_TYPES","GameUtils","toConsumableArray","fill","map","_","max","Math","random","field","getLineCopy","line","getTileCopy","tile","objectSpread","_ref2$score","undefined","getScoreForNewTile","xLen","yLen","_ref3","_ref3$amount","amount","getRandomArrayIndex","getNewTile","getFieldCopy","getEmptyTiles","emptyTiles","isFieldFull","fieldCopy","randIndex","_emptyTiles$randIndex","splice","forEach","push","dir","_ref4","reverseFieldLines","rotateFieldToRight","rotateFieldToLeft","applyMerge","rotateFn","rotateBackFn","Error","res","_ref5","_ref5$rotateFn","_ref5$rotateBackFn","mergeAllLines","removed","_ref6","addPositionForFieldTiles","addPositionForRemovedTiles","newField","newRemoved","flatten","concat","flat","arraySort","filter","Boolean","getTilesPosition","removedCopy","tilesPos","pos","key","_ref7","lineY","gameData","removedLine","first","second","newTileScore","newTile","toCompare","getFieldLength","_getFieldLength","xFirst","yFirst","_getFieldLength2","xSecond","ySecond","every","secondTile","tileScore","some","getProp","getObjectProp","includes","isAnyTileEmpty","isFieldHasMergeableTiles","getEmptyField","mergeTileLine","resetPropsOnField","_getFieldLength3","rotateRL","_ref8","to","_GameUtils$getFieldLe","reverse","GameFieldBackground","fakeGameField","react_default","createElement","className","j","parseInt","cssVars","getTilePos","p","TILE_POSES","TilePose","pose","div","_pose$div","defineProperty","_ref2","scale","transition","duration","opacity","type","times","values","observer","tileClass","classes","tile-removed","components_TilePose","initialPose","poseKey","GameField","_this$props","parsedField","getFlattenTilesWithPositions","components_Tile","Component","PopOver","title","onClose","onClick","src","alt","ScorePose","scoreUpdate","GameInterface","components_ScorePose","App","inject","state","isWinMessageShown","isMoveAvailableMessageShown","createNewField","createField","_this","game","onIsWinChange","newValue","setState","onIsMoveAvailable","onWinMessageClose","onMoveAvailableMessageClose","onKeyPress","ev","_this$props$game","mergeToLeft","mergeToRight","mergeToUp","mergeToDown","keyCode","_this$state","_this$props$game2","subscribeOnWin","subscribeOnIsMoveAvailable","onWinChangeDisposer","onIsMoveAvailableDisposer","document","addEventListener","removeEventListener","_this$props$game3","_this$state2","components_GameInterface","components_GameField","components_GameFieldBackground","components_PopOver","mergeTiles","mergeTilesTo","addTile","isFieldsEqual","isWinCheck","isMoveAvailableCheck","_addTile","isMoveAvailable","isWin","isAlreadyWin","subscribeOnChange","name","listener","observe","observable","action","_this2","_ref2$x","_ref2$y","_this3","resetGame","configure","enforceActions","stores","window","location","hostname","match","ReactDOM","render","index_module","components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33b7f09a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tileSize\":\"100px\",\"spaceBetweenTiles\":\"12px\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tileSize\":\"100px\",\"spaceBetweenTiles\":\"12px\"};","class Tools {\n  static getObjectProp(obj, ...props) {\n    if (!props.length) return obj;\n    let prop = obj[props[0]];\n    for (let i = 1; i < props.length; i++) {\n      if (prop instanceof Object) prop = prop[props[i]];\n      else return undefined;\n    }\n\n    return prop;\n  }\n}\n\nexport default Tools;","class Tile {\n  static uuid = (function* () {\n    let id = 1;\n    while (1) yield id++;\n  })()\n\n  constructor({\n    score,\n    id = Tile.uuid.next().value,\n    x,\n    y,\n    mergeTileId,\n    isNew = false\n  }) {\n    this.score = score;\n    this.id = id;\n    this.x = x;\n    this.y = y;\n    this.mergeTileId = mergeTileId;\n    this.isNew = isNew;\n  }\n}\n\nexport default Tile;","export const FIELD_SIZE_X = 4;\nexport const FIELD_SIZE_Y = 4;\nexport const DIR_TYPES = {\n  right: 'right',\n  left: 'left',\n  toLeft: 'toLeft',\n  toRight: 'toRight',\n  toDown: 'toDown',\n  toUp: 'toUp'\n};\nexport const WIN_SCORE = 2048;\n","import Tools from '../Tools';\nimport Tile from './Tile';\nimport arraySort from 'array-sort';\nimport { DIR_TYPES, WIN_SCORE } from '../../constants/index';\n\nclass GameUtils {\n  static getEmptyField({ x, y }) {\n    return [...Array(y).fill([]).map(_ => [...Array(x)])];\n  }\n\n  static getRandomArrayIndex(max) {\n    return ~~(Math.random() * max);\n  }\n\n  static getFieldCopy(field) {\n    return new Array(field.length).fill([])\n      .map((_, x) => GameUtils.getLineCopy(field[x]));\n  }\n\n  static getLineCopy(line) {\n    return line.map(GameUtils.getTileCopy);\n  }\n\n  static getTileCopy(tile) {\n    return tile ? new Tile({ ...tile }) : tile;\n  }\n\n  static getNewTile({\n    score = GameUtils.getScoreForNewTile(),\n  } = {}) {\n    return new Tile({\n      score,\n      isNew: true\n    });\n  }\n\n  static getScoreForNewTile() {\n    return Math.random() > 0.9090909 ? 4 : 2;\n  }\n\n  static getFieldLength(field) {\n    return {\n      xLen: field[0].length,\n      yLen: field.length\n    };\n  }\n\n  static addTile({ field, amount = 1 }) {\n    const {\n      getRandomArrayIndex,\n      getNewTile,\n      getFieldCopy,\n      getEmptyTiles\n    } = GameUtils;\n    if (amount < 1) return field;\n\n    const emptyTiles = getEmptyTiles(field);\n    if (amount > emptyTiles.length) {\n      return { isFieldFull: true, field };\n    }\n\n    const fieldCopy = getFieldCopy(field);\n    while (amount--) {\n      const randIndex = getRandomArrayIndex(emptyTiles.length);\n      const { x, y } = emptyTiles[randIndex];\n      emptyTiles.splice(randIndex, 1);\n      fieldCopy[y][x] = getNewTile();\n    }\n\n    return { field: fieldCopy };\n  }\n\n  static getEmptyTiles(field) {\n    const emptyTiles = [];\n\n    field.forEach((line, y) => {\n      line.forEach((tile, x) => {\n        !tile && emptyTiles.push({ y, x });\n      });\n    });\n\n    return emptyTiles;\n  }\n\n  static mergeTilesTo(field, { dir }) {\n    const {\n      reverseFieldLines,\n      rotateFieldToRight,\n      rotateFieldToLeft,\n      applyMerge\n    } = GameUtils;\n\n    switch (dir) {\n      case DIR_TYPES.toLeft:\n        return applyMerge({ field });\n\n      case DIR_TYPES.toRight:\n        return applyMerge({\n          field,\n          rotateFn: reverseFieldLines,\n          rotateBackFn: reverseFieldLines\n        });\n\n      case DIR_TYPES.toUp:\n        return applyMerge({\n          field,\n          rotateFn: rotateFieldToLeft,\n          rotateBackFn: rotateFieldToRight\n        });\n\n      case DIR_TYPES.toDown:\n        return applyMerge({\n          field,\n          rotateFn: rotateFieldToRight,\n          rotateBackFn: rotateFieldToLeft\n        });\n\n      default: return new Error('Wrong direction');\n    }\n  }\n\n  static applyMerge({\n    field,\n    rotateFn = x => x,\n    rotateBackFn = x => x,\n  }) {\n    const {\n      mergeAllLines,\n    } = GameUtils;\n    let rotated, removed, res;\n\n    rotated = rotateFn(field);\n    res = mergeAllLines(rotated);\n    rotated = rotateBackFn(res.field);\n    removed = rotateBackFn(res.removed);\n    return {\n      field: rotated,\n      removed,\n      score: res.score\n    };\n  }\n\n  static getFlattenTilesWithPositions({ field, removed }) {\n    const {\n      addPositionForFieldTiles,\n      addPositionForRemovedTiles,\n    } = GameUtils;\n    const newField = addPositionForFieldTiles(field);\n    const newRemoved = addPositionForRemovedTiles(field, removed);\n    const flatten = [\n      ...newField,\n      ...(newRemoved || [])\n    ].flat(1);\n\n    return arraySort(flatten.filter(Boolean), 'id');\n  }\n\n  static addPositionForRemovedTiles(field, removed) {\n    if (!removed) return;\n    const {\n      getFieldCopy,\n      getTilesPosition\n    } = GameUtils;\n    const removedCopy = getFieldCopy(removed);\n    const tilesPos = getTilesPosition(field);\n\n    return removedCopy.map((line) =>\n      line.map((tile) => {\n        if (!tile) return tile;\n        const pos = tilesPos[tile.mergeTileId];\n\n        return new Tile({\n          ...tile,\n          x: pos.x,\n          y: pos.y\n        });\n      })\n    );\n  }\n\n  static addPositionForFieldTiles(field) {\n    const {\n      getFieldCopy,\n    } = GameUtils;\n    const fieldCopy = getFieldCopy(field);\n\n    return fieldCopy.map((line, y) =>\n      line.map((tile, x) =>\n        tile ? new Tile({ ...tile, y, x }) : tile)\n    );\n  }\n\n  static getTilesPosition(field) {\n    const res = {};\n\n    field.forEach((line, y) => {\n      line.forEach((tile, x) => {\n        if (tile) res[tile.id] = { x, y };\n      });\n    });\n\n    return res;\n  }\n\n  static resetPropsOnField(field, props) {\n    const {\n      getFieldCopy,\n    } = GameUtils;\n    const fieldCopy = getFieldCopy(field);\n\n    return fieldCopy.map((line) =>\n      line.map(tile => {\n        if (!tile) return tile;\n        props.forEach((key) => {\n          tile[key] = undefined;\n        });\n        return tile;\n      })\n    );\n  }\n\n  static mergeAllLines = (field) => {\n    const {\n      getFieldLength,\n      getEmptyField,\n      mergeTileLine,\n      resetPropsOnField\n    } = GameUtils;\n    const fieldCopy = resetPropsOnField(field, ['isNew']);\n    const { xLen, yLen } = getFieldLength(fieldCopy);\n    const removed = getEmptyField({ x: xLen, y: yLen });\n    const gameData = {\n      removed,\n      score: 0\n    };\n\n    fieldCopy.map((line, lineY) => mergeTileLine({\n      line,\n      lineY,\n      gameData\n    }));\n\n    return {\n      field: fieldCopy,\n      ...gameData\n    };\n  }\n\n  static mergeTileLine({\n    line,\n    lineY,\n    gameData\n  }) {\n    const { getNewTile } = GameUtils;\n    const removedLine = gameData.removed[lineY];\n    let first = 0;\n\n    for (let second = 1; second < line.length; second++) {\n      if (line[first] && line[second]\n        && line[first].score === line[second].score\n      ) {\n        const newTileScore = line[first].score * 2;\n        const newTile = getNewTile({ score: newTileScore });\n\n        removedLine[first] = new Tile({\n          ...line[first],\n          mergeTileId: newTile.id\n        });\n        removedLine[second] = new Tile({\n          ...line[second],\n          mergeTileId: newTile.id\n        });\n        gameData.score += newTileScore;\n\n        line[first] = newTile;\n        line[second] = undefined;\n        first++;\n      } else if (line[second]) {\n        if (line[first]) {\n          first++;\n        }\n        line[first] = line[second];\n        if (first !== second) {\n          line[second] = undefined;\n        }\n      }\n    }\n\n    return line;\n  }\n\n  static rotateRL = ({ to }) => (field) => {\n    const { yLen, xLen } = GameUtils.getFieldLength(field);\n    const newField = GameUtils.getEmptyField({\n      x: yLen,\n      y: xLen\n    });\n\n    switch (to) {\n      case DIR_TYPES.right:\n        field.forEach((line, y) => {\n          line.forEach((tile, x) => {\n            newField[x][yLen - y - 1] = GameUtils.getTileCopy(tile);\n          });\n        });\n        break;\n      case DIR_TYPES.left:\n        field.forEach((line, y) => {\n          line.forEach((tile, x) => {\n            newField[xLen - x - 1][y] = GameUtils.getTileCopy(tile);\n          });\n        });\n        break;\n      default: return new Error('Wrong direction');\n    }\n    return newField;\n  }\n\n  static rotateFieldToRight = GameUtils.rotateRL({ to: DIR_TYPES.right });\n\n  static rotateFieldToLeft = GameUtils.rotateRL({ to: DIR_TYPES.left });\n\n  static reverseFieldLines = (field) => {\n    const newField = GameUtils.getFieldCopy(field);\n    return newField.map(line => line.reverse());\n  }\n\n  static isFieldsEqual(first, second, toCompare = ['id']) {\n    const {\n      getFieldLength\n    } = GameUtils;\n    const {\n      xLen: xFirst,\n      yLen: yFirst\n    } = getFieldLength(first);\n    const {\n      xLen: xSecond,\n      yLen: ySecond\n    } = getFieldLength(second);\n\n    if (xFirst !== xSecond || yFirst !== ySecond) return false;\n\n    return first.every((line, y) =>\n      line.every((tile, x) => {\n        const secondTile = second[y][x];\n        if (!tile || !secondTile) return tile === secondTile;\n        return toCompare.every(key => tile[key] === secondTile[key]);\n      })\n    );\n  }\n\n  static isWinCheck(field, tileScore = WIN_SCORE) {\n    return field.some(line =>\n      line.some(tile => tile ? tile.score >= tileScore : false\n      )\n    );\n  }\n\n  static isAnyTileEmpty(field) {\n    return field.some(line => line.some(tile => !tile));\n  }\n\n  static isFieldHasMergeableTiles(field) {\n    const { getObjectProp: getProp } = Tools;\n\n    return field.some((line, y) =>\n      line.some((tile, x) => {\n        if (!tile) return false;\n        const tilesAround = [\n          getProp(field, y - 1, x),\n          getProp(field, y + 1, x),\n          getProp(field, y, x - 1),\n          getProp(field, y, x + 1)\n        ]\n          .filter(Boolean)\n          .map(x => x.score);\n\n        return tilesAround.includes(tile.score);\n      })\n    );\n  }\n\n  static isMoveAvailableCheck(field) {\n    const {\n      isAnyTileEmpty,\n      isFieldHasMergeableTiles\n    } = GameUtils;\n    if (isAnyTileEmpty(field)) return true;\n\n    return isFieldHasMergeableTiles(field);\n  }\n}\n\nexport default GameUtils;\n","import React from 'react';\nimport GameUtils from '../utils/GameUtils';\n\nconst GameFieldBackground = ({ x, y }) => {\n  const fakeGameField = GameUtils.getEmptyField({ x, y });\n\n  return (\n    <div className=\"field\">\n      {fakeGameField.map((line, i) =>\n        <div className=\"field-line\" key={`field-line-${i}`}>\n          {line.map((_, j) =>\n            <div className=\"empty-tile\" key={`empty-tile-${j}`}></div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default GameFieldBackground;\n","import cssVars from '../styles/variables.scss';\n\nconst tileSize = parseInt(cssVars.tileSize);\nconst spaceBetweenTiles = parseInt(cssVars.spaceBetweenTiles);\n\nexport const getTilePos = p =>\n  (p + 1) * spaceBetweenTiles + p * tileSize;\nexport const TILE_POSES = {\n  position: 'position',\n  onNew: 'onNew',\n  initialPose: 'initialPose'\n};\nexport const ON_NEW_TILE_DURATION = 250;\nexport const ON_TILE_POSITION_DURATION = 175;","import pose from 'react-pose';\nimport {\n  getTilePos,\n  TILE_POSES,\n  ON_NEW_TILE_DURATION,\n  ON_TILE_POSITION_DURATION\n} from '../constants/animation';\n\nconst TilePose = pose.div({\n  [TILE_POSES.position]: {\n    x: ({ x }) => getTilePos(x),\n    y: ({ y }) => getTilePos(y),\n    scale: 1,\n    transition: {\n      x: { duration: ON_TILE_POSITION_DURATION },\n      y: { duration: ON_TILE_POSITION_DURATION },\n      scale: { duration: 0 }\n    }\n  },\n  [TILE_POSES.onNew]: {\n    x: ({ x }) => getTilePos(x),\n    y: ({ y }) => getTilePos(y),\n    scale: .8,\n    opacity: 0,\n    transition: {\n      x: { duration: 0 },\n      y: { duration: 0 },\n      scale: () => ({\n        type: 'keyframes',\n        times: [0, .5, 1],\n        values: [.8, 1.1, 1],\n        duration: ON_NEW_TILE_DURATION,\n      }),\n      opacity: () => ({\n        type: 'keyframes',\n        times: [0, .3],\n        values: [0, 1],\n        duration: ON_NEW_TILE_DURATION,\n      })\n    },\n  },\n  [TILE_POSES.initialPose]: {},\n});\n\nexport default TilePose;\n","import React from 'react';\nimport classes from 'classnames';\nimport { observer } from 'mobx-react';\nimport TilePose from './TilePose';\nimport { TILE_POSES } from '../constants/animation';\n\nconst Tile = ({ tile }) => {\n  const tileClass = classes(\n    'tile',\n    `tile-${tile.score}`,\n    { 'tile-removed': tile.mergeTileId }\n  );\n\n  return (\n    <TilePose\n      className={tileClass}\n      pose={tile.isNew ? TILE_POSES.onNew : TILE_POSES.position}\n      initialPose={TILE_POSES.initialPose}\n      x={tile.x}\n      y={tile.y}\n      poseKey={`${tile.x}-${tile.y}`}\n    >{tile.score}</TilePose>\n  );\n};\n\nexport default observer(Tile);","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport GameUtils from '../utils/GameUtils';\nimport Tile from './Tile';\n\n@observer\nclass GameField extends Component {\n  render() {\n    const { field, removed } = this.props;\n    const { getFlattenTilesWithPositions } = GameUtils;\n    const parsedField = getFlattenTilesWithPositions({ field, removed });\n\n    return (\n      <div className=\"tiles-container\">\n        {parsedField.map(tile => (\n          <Tile\n            key={`tile-${tile.id}`}\n            tile={tile}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default GameField;\n","import React from 'react';\n\nconst PopOver = ({ title, onClose }) => {\n  return (\n    <div className=\"pop-over\">\n      <div className=\"pop-over-inner\">\n        <div className=\"close-btn\" onClick={onClose}>\n          <img src=\"/img/cross.svg\" alt=\"X\" />\n        </div>\n        {!!title && <div className=\"title\">{title}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default PopOver;\n","import pose from 'react-pose';\n\nconst ScorePose = pose.div({\n  scoreUpdate: {\n    scale: 1,\n    transition: {\n      scale: () => ({\n        type: 'keyframes',\n        times: [0, .5, 1],\n        values: [1, 1.3, 1],\n        duration: 225,\n      })\n    }\n  }\n});\n\nexport default ScorePose;","import React from 'react';\nimport ScorePose from './ScorePose';\n\nconst GameInterface = ({ score }) => {\n  return (\n    <div className=\"game-interface\">\n      <div className=\"game-score\">\n        Score: {' '}\n        <ScorePose\n          className=\"score\"\n          pose={'scoreUpdate'}\n          poseKey={score}\n        >{score}</ScorePose>\n      </div>\n    </div>\n  );\n}\n\nexport default GameInterface;\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport GameFieldBackground from './GameFieldBackground';\nimport GameField from './GameField';\nimport PopOver from './PopOver';\nimport GameInterface from './GameInterface';\nimport { FIELD_SIZE_X, FIELD_SIZE_Y } from '../constants';\n\n@inject('game')\n@observer\nclass App extends Component {\n  state = {\n    isWinMessageShown: false,\n    isMoveAvailableMessageShown: false,\n  };\n\n  componentDidMount() {\n    const {\n      subscribeOnWin,\n      subscribeOnIsMoveAvailable\n    } = this.props.game;\n\n    this.createNewField();\n    this.onWinChangeDisposer = subscribeOnWin(this.onIsWinChange);\n    this.onIsMoveAvailableDisposer = subscribeOnIsMoveAvailable(\n      this.onIsMoveAvailable\n    );\n    document.addEventListener('keydown', this.onKeyPress, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyPress, false);\n    this.onWinChangeDisposer();\n    this.onIsMoveAvailableDisposer();\n  }\n\n  createNewField = () => {\n    const { createField } = this.props.game;\n\n    createField({\n      x: FIELD_SIZE_X,\n      y: FIELD_SIZE_Y\n    });\n  }\n\n  onIsWinChange = ({ newValue }) => {\n    if (newValue) this.setState({ isWinMessageShown: true });\n  }\n\n  onIsMoveAvailable = ({ newValue }) => {\n    if (!newValue) this.setState({ isMoveAvailableMessageShown: true });\n  }\n\n  onWinMessageClose = () => {\n    this.setState({ isWinMessageShown: false });\n  }\n\n  onMoveAvailableMessageClose = () => {\n    this.setState({ isMoveAvailableMessageShown: false });\n    this.createNewField();\n  }\n\n  onKeyPress = (ev) => {\n    const {\n      mergeToLeft,\n      mergeToRight,\n      mergeToUp,\n      mergeToDown\n    } = this.props.game;\n    const { keyCode } = ev;\n    const {\n      isWinMessageShown,\n      isMoveAvailableMessageShown\n    } = this.state;\n\n    if (isWinMessageShown || isMoveAvailableMessageShown) return;\n\n    switch (true) {\n      // \"A\", left arrow\n      case [65, 37].includes(keyCode):\n        mergeToLeft();\n        break;\n      // \"W\", up arrow\n      case [87, 38].includes(keyCode):\n        mergeToUp();\n        break;\n      // \"S\", down arrow\n      case [83, 40].includes(keyCode):\n        mergeToDown();\n        break;\n      // \"D\", right arrow\n      case [68, 39].includes(keyCode):\n        mergeToRight();\n        break;\n      default: return;\n    }\n  }\n\n  render() {\n    const {\n      field,\n      removed,\n      score\n    } = this.props.game;\n    const {\n      isWinMessageShown,\n      isMoveAvailableMessageShown\n    } = this.state;\n\n    if (!field) return null;\n\n    return (\n      <div className=\"game-container\">\n        <GameInterface\n          score={score}\n        />\n        <div className=\"game\">\n          <GameField\n            field={field}\n            removed={removed}\n          />\n          <GameFieldBackground\n            x={FIELD_SIZE_X}\n            y={FIELD_SIZE_Y}\n          />\n          {isWinMessageShown &&\n            <PopOver\n              title=\"You Won!\"\n              onClose={this.onWinMessageClose}\n            />\n          }\n          {isMoveAvailableMessageShown &&\n            <PopOver\n              title={'Game over'}\n              onClose={this.onMoveAvailableMessageClose}\n            />\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { observable, action, observe } from 'mobx';\nimport GameUtils from '../../utils/GameUtils';\nimport { DIR_TYPES } from '../../constants';\n\nclass game {\n  @observable field = null;\n  @observable isFieldFull = false;\n  @observable removed = null;\n  @observable isAlreadyWin = false;\n  @observable isWin = false;\n  @observable score = 0;\n  @observable isMoveAvailable = true;\n\n  @action resetGame = () => {\n    this.field = null;\n    this.isFieldFull = false;\n    this.removed = null;\n    this.isAlreadyWin = false;\n    this.isWin = false;\n    this.score = 0;\n    this.isMoveAvailable = true;\n  }\n\n  @action createField = ({ x = 4, y = 4 } = {}) => {\n    this.resetGame();\n    const { getEmptyField, addTile } = GameUtils;\n    const emptyField = getEmptyField({ x, y });\n    const { field } = addTile({ field: emptyField, amount: 2 });\n    this.field = field;\n  }\n\n  mergeTiles = ({ dir }) => () => {\n    const {\n      mergeTilesTo,\n      addTile,\n      isFieldsEqual,\n      isWinCheck,\n      isMoveAvailableCheck\n    } = GameUtils;\n    const res = mergeTilesTo(this.field, { dir });\n    if (isFieldsEqual(this.field, res.field)) return;\n    const {\n      field,\n      isFieldFull\n    } = addTile({ field: res.field, amount: 1 });\n    const isMoveAvailable = isMoveAvailableCheck(field);\n\n    const isWin = isWinCheck(field);\n    if (this.isAlreadyWin) {\n      this.isWin = false;\n    }\n    if (isWin && !this.isAlreadyWin) {\n      this.isWin = isWin;\n      this.isAlreadyWin = true;\n    }\n\n    this.field = field;\n    this.isFieldFull = isFieldFull;\n    this.removed = res.removed;\n    this.score = this.score + res.score;\n    this.isMoveAvailable = isMoveAvailable;\n  }\n\n  subscribeOnChange = (name) => (listener) => {\n    return observe(this, name, listener);\n  }\n\n  subscribeOnWin = this.subscribeOnChange('isWin');\n  subscribeOnIsMoveAvailable = this.subscribeOnChange('isMoveAvailable');\n\n  @action mergeToLeft = this.mergeTiles({ dir: DIR_TYPES.toLeft });\n  @action mergeToRight = this.mergeTiles({ dir: DIR_TYPES.toRight });\n  @action mergeToUp = this.mergeTiles({ dir: DIR_TYPES.toUp });\n  @action mergeToDown = this.mergeTiles({ dir: DIR_TYPES.toDown });\n}\n\nexport default game;\n","import { configure } from 'mobx';\nimport game from './game';\n\nconfigure({ enforceActions: 'observed' });\n\nexport default {\n  game: new game()\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport App from './components/App';\nimport stores from './stores';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/main.scss';\n\nReactDOM.render(\n  <Provider {...stores}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}